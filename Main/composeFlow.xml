
<flowSequence xmlns="http://dynamo.documill.com/schemas/flow"
              xmlns:cc="http://dynamo.documill.com/schemas/taglib/core/conditional"
              xmlns:cl="http://dynamo.documill.com/schemas/taglib/core/loop"
              xmlns:cv="http://dynamo.documill.com/schemas/taglib/core/var"
              xmlns:dbg="http://dynamo.documill.com/schemas/taglib/debug"
              xmlns:ddoc="http://dynamo.documill.com/schemas/taglib/dynamodoc"
              xmlns:dt="http://dynamo.documill.com/schemas/taglib/date"
              xmlns:fl="http://dynamo.documill.com/schemas/taglib/core/flow"
              xmlns:fo="http://dynamo.documill.com/schemas/taglib/format"
              xmlns:fs="http://dynamo.documill.com/schemas/taglib/formselect"
              xmlns:htmlex="http://dynamo.documill.com/schemas/taglib/html/external"
              xmlns:pdf="http://dynamo.documill.com/schemas/taglib/pdf"
              xmlns:sfch="http://dynamo.documill.com/schemas/taglib/salesforce/chatter"
              xmlns:sfcrud="http://dynamo.documill.com/schemas/taglib/salesforce/crud"
              xmlns:sfem="http://dynamo.documill.com/schemas/taglib/salesforce/email"
              xmlns:sff="http://dynamo.documill.com/schemas/taglib/salesforce/fields"
              xmlns:sffile="http://dynamo.documill.com/schemas/taglib/salesforce/file"
              xmlns:soql="http://dynamo.documill.com/schemas/taglib/salesforce/soql"
              xmlns:wizard="http://dynamo.documill.com/schemas/taglib/wizard"
              xmlns:xlsxd="http://dynamo.documill.com/schemas/taglib/xlsxdata"
              xmlns:es="http://dynamo.documill.com/schemas/taglib/esignature"
              xmlns:dex="http://dynamo.documill.com/schemas/taglib/docx/external"
              xmlns:sfpub="http://dynamo.documill.com/schemas/taglib/salesforce/publish"
              xmlns:pdfsig="http://dynamo.documill.com/schemas/taglib/pdf/signature"
              id="compose"
              name="Compose Flow"
              endMessage="Going back to previous screen...">
  <startFlow id="Start">
    <events>
      <defaultEvent step="Start" />
    </events>
    <steps>
      <step id="Start" name="Start">
        <logic>
          <!-- Main id -->
          <cv:set value="" var="id" />
          <cv:set value="${param.id}" var="id" />
          <cc:if test="${empty id}">
            <cv:set var="errorMessageCustom" value="Id prameter not defined" />
            <fl:start segment="Error" label="No id parameter" />
          </cc:if>
          <!-- Template id -->
          <cv:set var="templateId" value="" hideFromDataTab="true" />
          <cv:set var="templateId" value="${param.templateId}" hideFromDataTab="true" />
          <cc:if test="${empty templateId}">
            <cv:set var="errorMessageCustom" value="Template ID is empty. Save template before doing test run." />
            <fl:start segment="Error" label="Template not saved" />
          </cc:if>
          <!-- Common subtemplate -->
          <cc:choose>
            <cc:when test="${not empty param.dynamoCommonEngage}">
              <sffile:load var="dynamoCommonEngage" recordId="${param.dynamoCommonEngage}" />
            </cc:when>
            <cc:otherwise>
              <cv:set var="dynamoCommonEngage" value="dynamoCommon-engage-v1" />
            </cc:otherwise>
          </cc:choose>
          <cv:set var="dynDocId" value="" />
          <cv:set var="postID" value="" hideFromDataTab="true" />
          <cv:set var="viewMode" value="" hideFromDataTab="true" />
          <cv:set var="conf" value="" hideFromDataTab="true" />
          <cv:set var="dynDocStatus" value="" />
          <cv:set var="dynDocName" value="" />
          <cv:set var="documentOptions" value="" hideFromDataTab="true" />
          <cv:set var="versionNumber" value="" />
          <cv:set var="versionNumberSaved" value="" />
          <cv:set var="fullPDF" value="" hideFromDataTab="true" />
          <cv:set var="composedDoc" value="" hideFromDataTab="true" />
          <cv:set var="approverId" value="" />
          <cv:set var="approvers" value="" />
          <cv:set var="publishURL" value="" />
          <cv:set var="headings" />
          <cv:set var="saveMessage" value="" />
          <cv:set var="saveTime" value="" />
          <cv:set var="useClausePane" value="" />
          <cv:set var="useCommentPane" value="" />
          <cv:set var="emailContentDocumentId" />
          <cv:set var="emailDataFile" />
          <cv:setCollection var="availableContacts" hideFromDataTab="true" screenData="true" />
          <cv:setCollection var="selectedContacts" screenData="true" />
          <dt:setDate var="today" />
          <cv:setMap var="editorSettings" hideFromDataTab="true">
            <cv:addMapEntry key="contenteditable-editor" value="" />
            <cv:addMapEntry key="contenteditable-nativespellcheck" value="true" />
            <cv:addMapEntry key="contenteditable-toolbarcolor" value="#FFFFFF" />
            <cv:addMapEntry key="contenteditable-filterpaste" value="true" />
            <cv:addMapEntry key="contenteditable-toolbarcontainer" value="editable-toolbarContainer" />
          </cv:setMap>
          <!-- Formats -->
          <fo:setBooleanFormat />
          <fo:setCurrencyFormat pattern="" />
          <fo:setDateFormat pattern="" />
          <fo:setDateTimeFormat pattern="" />
          <fo:setNumberFormat />
          <fo:setPercentageFormat />
          <fo:setDateTimeFormat pattern="HH:mm" name="justTime" />
          <!-- Remove this? -->
          <cv:set var="fileName" value="" hideFromDataTab="true" />
          <cc:choose>
            <cc:when test="${param.eventID == &apos;new&apos;}">
              <fl:next label="New" step="New" />
            </cc:when>
            <cc:when test="${param.eventID == &apos;open&apos;}">
              <fl:next label="Open" step="Open" />
            </cc:when>
            <cc:otherwise>
              <cv:set var="errorMessageCustom" value="Invalid event ${param.eventID}" />
              <fl:start label="Invalid event" segment="Error" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="New" name="New" onError="System error">
        <logic>
          <!-- Will be updated after main object query -->
          <cv:set var="dynDocName" value="Dynamo Document" />
          <cv:set var="dynDocStatus" value="Draft" />
          <cv:setMap var="conf" />
          <cv:addMapEntry key="emailSubject" value="${&apos;&apos;}" map="${conf}" />
          <cv:setCollection var="c" />
          <cv:addMapEntry key="selectedToContacts" value="${c}" map="${conf}" />
          <cv:addMapEntry key="selectedCcContacts" value="${c}" map="${conf}" />
          <cv:addMapEntry key="selectedBccContacts" value="${c}" map="${conf}" />
          <cv:addMapEntry key="selectedFiles" value="${c}" map="${conf}" />
          <cv:toJSON value="${conf}" var="confJSON" />
          <cc:choose>
            <cc:when test="${not empty param.testDynDocId}">
              <dbg:log level="WARNING" message="Test mode: Using existing dynamo document" />
              <fl:next step="Reset for testing" />
            </cc:when>
            <cc:otherwise>
              <sfcrud:create type="dynamo__Dynamo_Document__c" var="dynDocId">
                <sfcrud:field name="Name" value="${dynDocName}" />
                <cc:if test="${id.startsWith(&apos;006&apos;)}">
                  <sfcrud:field name="dynamo__Opportunity__c" value="${id}" />
                </cc:if>
                <sfcrud:field name="dynamo__Parent_Record_ID__c" value="${id}" />
                <sfcrud:field name="dynamo__Template_ID__c" value="${templateId}" />
                <sfcrud:field name="dynamo__Document_Status__c" value="${dynDocStatus}" />
                <sfcrud:field name="dynamo__Configuration_JSON__c" value="${confJSON}" />
              </sfcrud:create>
              <fl:next step="Query document" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="Open" name="Open" onError="System error">
        <logic>
          <cc:choose>
            <cc:when test="${not empty param.testDynDocId}">
              <dbg:log level="WARNING" message="Test mode: Using existing dynamo document" />
              <cv:set value="${param.testDynDocId}" var="dynDocId" />
              <cv:set value="" var="id" />
            </cc:when>
            <cc:otherwise>
              <cv:set value="${id}" var="dynDocId" />
              <cv:set value="" var="id" />
            </cc:otherwise>
          </cc:choose>
          <cv:set var="postID" value="${param.extra}" />
          <fl:next label="init" step="Query document" />
        </logic>
      </step>
      <step id="Query document" name="Query document">
        <logic>
          <sff:record var="dynDoc" type="dynamo__Dynamo_Document__c" recordID="${dynDocId}" fields="dynamo__Locked__c, dynamo__Last_Editor__r.Name, dynamo__Next_User__r.Id, dynamo__Next_User__r.Name, dynamo__Document_Status__c, dynamo__Publication_URL__c, Id, Name, dynamo__Configuration_JSON__c, dynamo__Parent_Record_ID__c, Owner.Name, Owner.Id, dynamo__Publication_Date__c, dynamo__Publication_Expires__c" hideFromDataTab="true" />
          <cv:set var="id" value="${dynDoc.dynamo__Parent_Record_ID__c}" />
          <cc:if test="${empty id}">
            <cv:set var="errorMessageCustom" value="Parent object record ID is empty" />
            <fl:start segment="Error" label="No parent" />
          </cc:if>
          <cv:set var="loadedDocName" value="${dynDoc.Name}" />
          <cv:set var="dynDocName" value="${dynDoc.Name}" />
          <cv:parseJSON value="${dynDoc.dynamo__Configuration_JSON__c}" var="conf" screenData="true" />
          <cv:set var="approverId" value="${dynDoc.dynamo__Next_User__r.Id}" />
          <cv:set var="publishURL" value="${dynDoc.dynamo__Publication_URL__c}" />
          <cv:set var="publicationDate" value="${dynDoc.dynamo__Publication_Date__c}" />
          <cv:set var="publicationExpires" value="${dynDoc.dynamo__Publication_Expires__c}" />
          <cv:set value="${dynDoc.dynamo__Document_Status__c}" var="dynDocStatus" />
          <cv:set var="versionNumberSaved" value="${conf.versionNumber}" />
          <cc:choose>
            <cc:when test="${not empty versionNumberSaved}">
              <cv:set value="${versionNumberSaved+1}" var="versionNumber" hideFromDataTab="" />
            </cc:when>
            <cc:otherwise>
              <cv:set value="1" var="versionNumber" hideFromDataTab="" />
            </cc:otherwise>
          </cc:choose>
          <cc:if test="${not empty versionNumberSaved}" />
          <cc:if test="${empty postID}">
            <fl:setEndURL value="${sfdcServer}/lightning/r/${id}/view" />
          </cc:if>
          <!-- CUSTOMIZE: users for chatter mentions -->
          <soql:query select="SELECT Id, Name, Division FROM User limit 20" var="mentionOptions" />
          <fl:next step="Next" />
        </logic>
      </step>
      <step id="Next" name="Next">
        <logic>
          <cc:choose>
            <cc:when test="${event == &apos;new&apos;}">
              <fl:start segment="Custom Data" label="Get SF data" />
            </cc:when>
            <cc:otherwise>
              <fl:start segment="Load Files" label="Load files" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="Reset for testing" name="Reset for testing" onError="System error">
        <logic>
          <!-- Only for testing -->
          <sfcrud:update type="dynamo__Dynamo_Document__c">
            <sfcrud:field name="Id" value="${param.testDynDocId}" />
            <sfcrud:field name="Name" value="${dynDocName}" />
            <cc:if test="${id.startsWith(&apos;006&apos;)}">
              <sfcrud:field name="dynamo__Opportunity__c" value="${id}" />
            </cc:if>
            <sfcrud:field name="dynamo__Parent_Record_ID__c" value="${id}" />
            <sfcrud:field name="dynamo__Template_ID__c" value="${templateId}" />
            <sfcrud:field name="dynamo__Document_Status__c" value="Draft" />
            <sfcrud:field name="dynamo__Locked__c" value="${false}" />
            <sfcrud:field name="dynamo__Last_Editor__c" value="${&apos;&apos;}" />
            <sfcrud:field name="dynamo__Next_User__c" value="${&apos;&apos;}" />
            <sfcrud:field name="dynamo__Publication_URL__c" value="${&apos;&apos;}" />
            <sfcrud:field name="dynamo__Configuration_JSON__c" value="${confJSON}" />
          </sfcrud:update>
          <cv:set var="dynDocId" value="${param.testDynDocId}" />
          <fl:next step="Query document" />
        </logic>
      </step>
      <step id="System error" name="System error">
        <logic>
          <fl:start segment="Error" label="Error" />
        </logic>
      </step>
    </steps>
  </startFlow>
  <standardFlow id="Load Files">
    <events>
      <defaultEvent step="Start" />
    </events>
    <steps>
      <step id="Start" name="Start" onError="Error">
        <logic>
          <cc:choose>
            <cc:when test="${dynDocStatus == &apos;Signed&apos;}">
              <fl:next step="Load signed PDF" label="Signed" />
            </cc:when>
            <cc:when test="${dynDocStatus == &apos;Draft&apos;}">
              <fl:next step="Load editable areas" label="Draft" />
            </cc:when>
            <cc:when test="${dynDocStatus == &apos;In Review&apos;}">
              <fl:next step="Load editable areas" label="in Review" />
            </cc:when>
            <cc:when test="${dynDocStatus == &apos;External New Version Request&apos;}">
              <fl:next step="Load editable areas" label="External New Version Request" />
            </cc:when>
            <cc:when test="${dynDocStatus == &apos;Sent&apos;}">
              <fl:next step="Load editable areas" label="External New Version Request" />
            </cc:when>
            <cc:otherwise>
              <fl:next step="Load composed files" label="Other state" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="Load editable areas" name="Load editable areas" message="Loading previous version" onError="Error">
        <logic>
          <!-- Full updated PDF is generated later on -->
          <cv:set var="fullPDF" value="" />
          <cv:set var="composedDoc" value="" />
          <cc:if test="${not empty conf.filePDF}">
            <sffile:loadLatestContentVersion contentDocumentId="${conf.filePDF}" var="tempPDF" hideFromDataTab="true" />
            <cv:set var="fileName" value="${tempPDF.fileName}" hideFromDataTab="true" />
            <cv:restoreStringSet prefix="edit_" readFrom="${tempPDF}" />
            <cv:set var="tempPDF" value="" />
          </cc:if>
          <cc:if test="${not empty conf.emailDataFileId}">
            <sffile:loadLatestContentVersion var="emailDataFile" contentDocumentId="${conf.emailDataFileId}" />
            <cv:readFile file="${emailDataFile}" />
          </cc:if>
          <fl:start segment=":next" />
        </logic>
      </step>
      <step id="Load composed files" name="Load composed files" onError="Error">
        <logic>
          <cv:set var="fileLoaded" value="false" />
          <cc:if test="${not empty conf.filePDF}">
            <sffile:loadLatestContentVersion var="fullPDF" contentDocumentId="${conf.filePDF}" />
            <cv:set var="fileLoaded" value="true" />
            <cv:set var="fileName" value="${fullPDF.title}" hideFromDataTab="true" />
          </cc:if>
          <cc:if test="${not empty conf.fileHTML}">
            <sffile:loadLatestContentVersion var="composedDoc" contentDocumentId="${conf.fileHTML}" />
            <cv:set var="fileLoaded" value="true" />
          </cc:if>
          <cc:if test="${not empty conf.fileEmail}">
            <sffile:loadLatestContentVersion var="composedEmail" contentDocumentId="${conf.fileEmail}" />
            <cv:set var="fileLoaded" value="true" />
          </cc:if>
          <cc:choose>
            <cc:when test="${fileLoaded}">
              <fl:next step="No data load" label="Files found" />
            </cc:when>
            <cc:otherwise>
              <cv:set var="errorMessageCustom" value="Files not found" />
              <fl:next label="Files not found" step="Error" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="Load signed PDF" name="Load signed PDF" onError="Error">
        <logic>
          <cc:if test="${not empty conf.finalPDF}">
            <sffile:load var="fullPDF" recordId="${conf.finalPDF}" />
          </cc:if>
          <cc:choose>
            <cc:when test="${not empty fullPDF}">
              <cv:set var="fileName" value="${fullPDF.title}" hideFromDataTab="true" />
              <fl:next step="No data load" />
            </cc:when>
            <cc:otherwise>
              <cv:set var="errorMessageCustom" value="Signed PDF not found" />
              <fl:start segment="Error" label="Signed PDF not found" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="Error" name="Error">
        <logic>
          <cv:set var="flowStatus" value="error" hideFromDataTab="true" />
          <fl:start segment="Error" />
        </logic>
      </step>
      <step id="No data load" name="No data load">
        <logic>
          <dt:setDateTime var="lastDataRefresh"
                          year="${conf.lastDataRefresh.year}"
                          month="${conf.lastDataRefresh.month}"
                          day="${conf.lastDataRefresh.day}"
                          hour="${conf.lastDataRefresh.hour}"
                          minute="${conf.lastDataRefresh.min}"
                          second="${conf.lastDataRefresh.sec}" />
          <fl:start segment="Init View" label="No data from SF" />
        </logic>
      </step>
    </steps>
  </standardFlow>
  <standardFlow id="Content Template">
    <events>
      <defaultEvent step="Start content template" />
    </events>
    <steps>
      <step id="Start content template" name="Start content template">
        <logic>
          <cv:set var="defaultEmailTemplate" value="Correspondence/content.html" />
          <cc:choose>
            <cc:when test="${not empty conf.emailTemplate}">
              <cv:set var="emailTemplate" value="${conf.emailTemplate}" />
              <cv:set var="oldEmailTemplate" value="${emailTemplate}" />
              <fl:start segment=":next" />
            </cc:when>
            <cc:otherwise>
              <cv:set var="emailTemplate" value="${defaultEmailTemplate}" />
              <cv:set var="oldEmailTemplate" value="${emailTemplate}" />
              <fl:next step="Templates" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <screenStep id="Templates" name="Templates" screen="Main/TemplatesScreen.html" />
      <step id="Template selected" name="Template selected">
        <logic>
          <cv:addMapEntry value="${emailTemplate}" key="emailTemplate" map="${conf}" />
          <fl:start segment=":next" />
        </logic>
      </step>
      <step id="Cancel" name="Cancel">
        <logic>
          <fl:start segment="End" />
        </logic>
      </step>
    </steps>
  </standardFlow>
  <standardFlow id="Custom Data">
    <events>
      <defaultEvent step="Start" />
    </events>
    <steps>
      <step id="Start" name="Start">
        <logic>
          <dt:setDateTime var="lastDataRefresh" />
          <cv:setMap var="lastDataRefreshMap" hideFromDataTab="true">
            <cv:addMapEntry key="year" value="${lastDataRefresh.year}" />
            <cv:addMapEntry key="month" value="${lastDataRefresh.monthOfYear}" />
            <cv:addMapEntry key="day" value="${lastDataRefresh.dayOfMonth}" />
            <cv:addMapEntry key="hour" value="${lastDataRefresh.hourOfDay}" />
            <cv:addMapEntry key="min" value="${lastDataRefresh.minuteOfHour}" />
            <cv:addMapEntry key="sec" value="${lastDataRefresh.secondOfMinute}" />
          </cv:setMap>
          <cv:addMapEntry map="${conf}" key="lastDataRefresh" value="${lastDataRefreshMap}" />
          <fl:next step="Init variables" />
        </logic>
      </step>
      <step id="Init variables" name="Init variables">
        <logic>
          <cv:set var="libraryName" value="" />
          <fl:next step="Editor settings" />
        </logic>
      </step>
      <step id="Editor settings" name="Editor settings">
        <logic>
          <!-- Define editor toolbar -->
          <cv:setMap var="editorSettings" hideFromDataTab="true">
            <cv:addMapEntry key="contenteditable-editor" value="table;font;color" />
            <cv:addMapEntry key="contenteditable-nativespellcheck" value="true" />
            <cv:addMapEntry key="contenteditable-toolbarcolor" value="#FFFFFF" />
            <cv:addMapEntry key="contenteditable-filterpaste" value="true" />
            <cv:addMapEntry key="contenteditable-toolbarcontainer" value="editable-toolbarContainer" />
          </cv:setMap>
          <!-- Use internal comments (chatter feed) pane at left -->
          <cv:set var="useCommentPane" value="false" />
          <!-- Show  clause pane  at right -->
          <cv:set var="useClausePane" value="true" />
          <fl:next step="Load Salesforce data" />
        </logic>
      </step>
      <step id="Load Salesforce data" name="Load Salesforce data" message="Loading Data">
        <logic>
          <fl:setMessage message="Loading Case" />
          <sff:record id="mainRecord"
                      var="cas"
                      type="Case"
                      recordID="${id}"
                      fields="Id, CaseNumber, Account.Name, Account.Id, Owner.Name, INVALID_FIELD, INVALID_FIELD, INVALID_FIELD, INVALID_FIELD, INVALID_FIELD, INVALID_FIELD, Contact.Name, Contact.Email, Contact.Id, Contact.Salutation"
                      mainRecord="true" />
          <!-- Language, typically taken from Salesforce -->
          <cv:set var="documentLanguage" value="en" />
          <cv:setTranslation language="${documentLanguage}" var="labels" />
          <fl:next step="Set document" />
        </logic>
      </step>
      <step id="Set document" name="Set document">
        <logic >
          <cc:choose>
            <!-- New document -->
            <cc:when test="${param.eventID == &apos;new&apos;}">
              <!-- Define document name here -->
              <cv:set var="dynDocName" value="Correspondence" />
              <sfcrud:update type="dynamo__Dynamo_Document__c">
                <sfcrud:field name="Id" value="${dynDocId}" />
                <sfcrud:field name="Name" value="${dynDocName}" />
              </sfcrud:update>
              <cv:addMapEntry value="${dynDocName}" key="emailSubject" map="${conf}" />
            </cc:when>
            <!-- Open existing document -->
            <cc:otherwise>
              <!-- If document name needs to be updated on every open -->
              <cc:choose>
                <cc:when test="${not empty conf.emailSubject}" />
                <cc:otherwise>
                  <cv:addMapEntry value="${dynDocName}" key="emailSubject" map="${conf}" />
                </cc:otherwise>
              </cc:choose>
            </cc:otherwise>
          </cc:choose>
          <fl:next step="Recipients" />
        </logic>
      </step>
      <step id="Recipients" name="Recipients">
        <logic>
          <cc:choose>
            <cc:when test="${not empty conf.selectedToContacts}" />
            <cc:otherwise>
              <cc:choose>
                <cc:when test="${cas.Account.IsPersonAccount}">
                  <cv:filter value="${conf.selectedToContacts}" var="matches" where="${x.Id == cas.Account.Id}" itemName="x" />
                  <cc:if test="${matches.size() == 0}">
                    <cv:setMap var="entry">
                      <cv:addMapEntry key="Id" value="${cas.Account.Id}" />
                      <cv:addMapEntry key="Name" value="${cas.Account.Name}" />
                      <cv:addMapEntry key="Email" value="${cas.Account.PersonEmail}" />
                      <cv:addMapEntry key="Label" value="${cas.Account.Salutation} ${cas.Account.Name} (${cas.Account.PersonEmail}) " />
                    </cv:setMap>
                    <cv:addItem collection="${conf.selectedToContacts}" value="${entry}" />
                  </cc:if>
                </cc:when>
                <cc:otherwise>
                  <cc:if test="${not empty cas.Contact.Id}">
                    <cv:filter value="${conf.selectedToContacts}" var="matches" where="${x.Id == cas.Contact.Id}" itemName="x" />
                    <cc:if test="${matches.size() == 0}">
                      <cv:setMap var="entry">
                        <cv:addMapEntry key="Id" value="${cas.Contact.Id}" />
                        <cv:addMapEntry key="Name" value="${cas.Contact.Name}" />
                        <cv:addMapEntry key="Email" value="${cas.Contact.Email}" />
                        <cv:addMapEntry key="Label" value="${cas.Contact.Salutation} ${cas.Contact.Name} (${cas.Contact.Email})" />
                      </cv:setMap>
                      <cv:addItem collection="${conf.selectedToContacts}" value="${entry}" />
                    </cc:if>
                  </cc:if>
                </cc:otherwise>
              </cc:choose>
            </cc:otherwise>
          </cc:choose>
          <fl:next step="Is internal approval needed" label="" />
        </logic>
      </step>
      <step id="Is internal approval needed" name="Is internal approval needed">
        <logic>
          <!-- Internal approval criteria -->
          <!-- TODO: check need for internal approval -->
          <cv:set var="approvalRequired" value="true" />
          <cc:if test="${approvalRequired == true}">
            <!-- If approver is known (user id) -->
            <cv:set var="defaultApproverId" />
            <!-- List of approvers -->
            <soql:query var="approvers" select="SELECT Id, Name FROM User where isActive = true limit 20" hideFromDataTab="true" />
          </cc:if>
          <fl:next step="Next" />
        </logic>
      </step>
      <step id="Set share configuration" name="Set share configuration" message="Loading Data">
        <logic>
          <!-- Share type -->
          <cv:addMapEntry key="shareType" value="sign" screenData="" map="${conf}" />
          <!-- End URL -->
          <cv:addMapEntry key="endURL" value="https://www.documill.com/dynamo/" screenData="" map="${conf}" />
          <!-- Validity in days -->
          <cv:addMapEntry key="publicationValidDays" value="15" screenData="" map="${conf}" />
          <!-- Sender -->
          <cv:setMap var="sender">
            <cv:addMapEntry value="${UserInfo.userId}" key="userId" />
            <cv:addMapEntry value="${UserInfo.fullName}" key="fullName" />
            <cv:addMapEntry value="${UserInfo.email}" key="email" />
          </cv:setMap>
          <cv:addMapEntry key="sender" value="${sender}" screenData="" map="${conf}" />
          <!-- Record -->
          <cv:setMap var="record">
            <cv:addMapEntry key="id" value="${id}" />
          </cv:setMap>
          <cv:addMapEntry key="record" value="${record}" screenData="" map="${conf}" />
          <!-- Primary contact -->
          <cv:setMap var="primaryContact">
            <cv:addMapEntry value="NA" key="contactId" />
            <cv:addMapEntry value="${UserInfo.fullName}" key="fullName" />
            <cv:addMapEntry value="${UserInfo.email}" key="email" />
            <cv:addMapEntry value="${UserInfo.organizationName}" key="company" />
          </cv:setMap>
          <cv:addMapEntry key="primaryContact" map="${conf}" value="${primaryContact}" />
          <!-- Signers -->
          <cv:setCollection var="signers" />
          <!-- Signer 1 -->
          <cv:setMap var="signer">
            <cv:addMapEntry value="${UserInfo.userId}" key="userId" />
            <cv:addMapEntry value="${UserInfo.fullName}" key="fullName" />
            <cv:addMapEntry value="${UserInfo.email}" key="email" />
            <cv:addMapEntry value="${UserInfo.organizationName}" key="company" />
          </cv:setMap>
          <cv:addMapEntry value="${signer.fullName} (${signer.company})" key="label" map="${signer}" />
          <cv:addItem value="${signer}" collection="${signers}" />
          <cv:addMapEntry key="signers" map="${conf}" value="${signers}" />
          <!-- Disable share config UI -->
          <cv:set var="disableShareConfigUI" value="true" />
          <fl:next step="Next" label="" />
        </logic>
      </step>
      <step id="Next" name="Next">
        <logic>
          <!-- CUSTOMIZE: decide if options are shown. Now always false. -->
          <cc:choose>
            <cc:when test="${event == &apos;new&apos;}">
              <cv:set var="documentOptions" value="false" />
            </cc:when>
            <cc:otherwise>
              <cv:set var="documentOptions" value="false" />
            </cc:otherwise>
          </cc:choose>
          <fl:start segment=":next" />
        </logic>
      </step>
    </steps>
  </standardFlow>
  <standardFlow id="Questions">
    <events>
      <defaultEvent step="Start" />
    </events>
    <steps>
      <step id="Start" name="Start">
        <logic>
          <cc:choose>
            <cc:when test="${documentOptions}">
              <fl:next step="Options" label="Choose options" />
            </cc:when>
            <cc:otherwise>
              <fl:next step="Default options" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <screenStep id="Options" name="Options" screen="Main/OptionsScreen.html" />
      <step id="Default options" name="Default options">
        <logic>
          <fl:next step="Options selected" />
        </logic>
      </step>
      <step id="Options selected" name="Options selected">
        <logic>
          <fl:start segment="Init View" />
        </logic>
      </step>
      <step id="Exit" name="Exit">
        <logic>
          <cv:set var="flowStatus" value="exit" />
          <fl:start segment="End" />
        </logic>
      </step>
    </steps>
  </standardFlow>
  <standardFlow id="Init View">
    <events>
      <defaultEvent step="Document status" />
    </events>
    <steps>
      <step id="Document status" name="Document status">
        <logic>
          <!-- Default view -->
          <cv:set var="viewMode" value="comment" />
          <!-- Buttons -->
          <cv:set var="buttonRequestApproval" value="false" hideFromDataTab="true" />
          <cv:set var="buttonApprove" value="false" hideFromDataTab="true" />
          <cv:set var="buttonReject" value="false" hideFromDataTab="true" />
          <cv:set var="buttonPublish" value="false" hideFromDataTab="true" />
          <cv:set var="buttonEdit" value="false" hideFromDataTab="true" />
          <cv:set var="buttonDraft" value="false" hideFromDataTab="true" />
          <cv:set var="buttonRefresh" value="false" hideFromDataTab="true" />
          <cv:set var="buttonDocumentDisabled" value="false" hideFromDataTab="true" />
          <cv:set var="buttonSend" value="false" />
          <cv:set var="buttonCompare" value="false" />
          <cc:choose>
            <cc:when test="${versionNumberSaved &gt; 1}">
              <cv:set var="buttonCompare" value="true" />
            </cc:when>
            <cc:otherwise>
              <cv:set var="buttonCompare" value="false" />
            </cc:otherwise>
          </cc:choose>
          <cc:choose>
            <cc:when test="${dynDocStatus == &apos;Draft&apos;}">
              <fl:next label="Draft" step="Draft" />
            </cc:when>
            <cc:when test="${dynDocStatus == &apos;In Review&apos;}">
              <fl:next label="In Review" step="In Review" />
            </cc:when>
            <cc:when test="${dynDocStatus == &apos;Approved&apos;}">
              <fl:next label="Approved" step="Approved" />
            </cc:when>
            <cc:when test="${dynDocStatus == &apos;Rejected&apos;}">
              <fl:next label="Rejected" step="Rejected" />
            </cc:when>
            <cc:when test="${dynDocStatus == &apos;Sent&apos;}">
              <fl:next label="Sent" step="Sent" />
            </cc:when>
            <cc:when test="${dynDocStatus == &apos;Waiting Signature&apos;}">
              <fl:next label="Waiting signature" step="Waiting Signature" />
            </cc:when>
            <cc:when test="${dynDocStatus == &apos;Signed&apos;}">
              <fl:next label="Signed" step="Signed" />
            </cc:when>
            <cc:when test="${dynDocStatus == &apos;External Review&apos;}">
              <fl:next step="External Review" label="External Review" />
            </cc:when>
            <cc:when test="${dynDocStatus == &apos;External Approved&apos;}">
              <fl:next step="External Approved" label="External Approved" />
            </cc:when>
            <cc:when test="${dynDocStatus == &apos;External Rejected&apos;}">
              <fl:next step="External Rejected" label="External Rejected" />
            </cc:when>
            <cc:when test="${dynDocStatus == &apos;External New Version Request&apos;}">
              <fl:next step="External New Version Request" label="External New Version Request" />
            </cc:when>
            <cc:when test="${dynDocStatus == &apos;Error&apos;}">
              <fl:next step="Error" label="Error status" />
            </cc:when>
            <cc:otherwise>
              <cv:set var="errorMessageCustom" value="Invalid status: ${dynDocStatus}" />
              <fl:start segment="Error" label="Invalid status" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="Draft" name="Draft">
        <logic>
          <cc:if test="${dynDoc.dynamo__Locked__c == false}">
            <cv:set var="buttonEdit" value="true" />
          </cc:if>
          <cc:if test="${not empty conf.selectedToContacts}">
            <cc:choose>
              <cc:when test="${approvalRequired}">
                <cv:set var="buttonRequestApproval" value="true" />
              </cc:when>
              <cc:otherwise>
                <cv:set var="buttonSend" value="true" />
              </cc:otherwise>
            </cc:choose>
          </cc:if>
          <fl:next step="To view" />
        </logic>
      </step>
      <step id="In Review" name="In Review">
        <logic>
          <cc:if test="${approverId == UserInfo.userId}">
            <cv:set var="buttonReject" value="true" />
            <cv:set var="buttonApprove" value="true" />
            <cc:if test="${dynDoc.dynamo__Locked__c == false}">
              <cv:set var="buttonEdit" value="true" />
            </cc:if>
          </cc:if>
          <cc:if test="${dynDoc.dynamo__Locked__c == false}">
            <cv:set var="buttonDraft" value="true" />
          </cc:if>
          <fl:next step="To view" />
        </logic>
      </step>
      <step id="External Review" name="External Review">
        <logic>
          <cv:set var="externalFeedViewOnly" value="${true}" />
          <cv:set var="useCommentsPane" value="true" />
          <fl:next step="To view" />
        </logic>
      </step>
      <step id="Approved" name="Approved">
        <logic>
          <cv:set var="buttonDraft" value="true" />
          <cv:set var="buttonPublish" value="true" />
          <cv:set var="buttonSend" value="true" />
          <fl:next step="To view" />
        </logic>
      </step>
      <step id="External Approved" name="External Approved">
        <logic>
          <cv:set var="viewMode" value="preview" />
          <fl:next step="To view" />
        </logic>
      </step>
      <step id="Rejected" name="Rejected">
        <logic>
          <cv:set var="buttonDraft" value="true" />
          <fl:next step="To view" />
        </logic>
      </step>
      <step id="External Rejected" name="External Rejected">
        <logic>
          <cv:set var="buttonDraft" value="true" />
          <fl:next step="To view" />
        </logic>
      </step>
      <step id="External New Version Request" name="External New Version Request">
        <logic>
          <cv:set var="useCommentsPane" value="true" />
          <cv:set var="buttonEdit" value="true" />
          <cv:set var="buttonPublish" value="true" />
          <fl:next step="To view" />
        </logic>
      </step>
      <step id="Sent" name="Sent">
        <logic>
          <cv:set var="viewMode" value="preview" />
          <cv:set var="buttonDraft" value="true" hideFromDataTab="true" />
          <fl:next step="To view" />
        </logic>
      </step>
      <step id="Waiting Signature" name="Waiting Signature">
        <logic>
          <cv:set var="viewMode" value="activity" />
          <fl:next step="To view" />
        </logic>
      </step>
      <step id="Signed" name="Signed">
        <logic>
          <cv:set var="viewMode" value="preview" />
          <cv:set var="buttonDocumentDisabled" value="true" hideFromDataTab="true" />
          <fl:next step="To view" />
        </logic>
      </step>
      <step id="Error" name="Error">
        <logic>
          <cv:set var="viewMode" value="activity" />
          <fl:next step="To view" />
        </logic>
      </step>
      <step id="To view" name="To view">
        <logic>
          <fl:start segment="Email" label="View" />
        </logic>
      </step>
    </steps>
  </standardFlow>
  <standardFlow id="View">
    <events>
      <defaultEvent step="Start preview" />
    </events>
    <steps>
      <step id="Start preview" name="Start preview" message=" ">
        <logic>
          <cc:choose>
            <cc:when test="${viewMode == &apos;comment&apos;}">
              <cv:set var="showInternalComments" value="true" />
              <cv:set var="showExternalComments" value="true" />
              <cv:set var="showPDF" value="false" hideFromDataTab="true" />
              <cc:choose>
                <cc:when test="${not empty composedDoc}">
                  <cv:set var="viewDoc" value="${composedDoc}" hideFromDataTab="true" />
                  <fl:next step="Comments pane" label="Cached doc HTML" />
                </cc:when>
                <cc:otherwise>
                  <fl:next step="Compose all" label="Compose doc HTML" />
                </cc:otherwise>
              </cc:choose>
            </cc:when>
            <cc:when test="${viewMode == &apos;activity&apos;}">
              <cv:set var="showPDF" value="false" />
              <cv:set var="showInternalComments" value="false" />
              <cv:set var="showExternalComments" value="false" />
              <fl:next step="Compose status report" label="Activity report" />
            </cc:when>
            <cc:when test="${viewMode == &apos;preview&apos;}">
              <cv:set var="showPDF" value="true" />
              <cc:choose>
                <cc:when test="${not empty fullPDF}">
                  <fl:next label="Preview" step="Preview" />
                </cc:when>
                <cc:otherwise>
                  <fl:next label="Compose PDF" step="Compose all" />
                </cc:otherwise>
              </cc:choose>
            </cc:when>
            <cc:otherwise>
              <cv:set var="errorMessageCustom" value="Invalid viewMode: ${viewMode}" />
              <fl:start segment="Error" label="Invalid view mode" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="Compose status report" name="Compose status report">
        <logic>
          <fl:setMessage message="Generating report" />
          <fo:setDateTimeFormat name="HHmm" pattern="HH:mm" />
          <fo:setDateTimeFormat name="ddMMyy" pattern="dd.MM.yy" />
          <cv:set var="prevStatus" value="${dynDocStatus}" />
          <soql:query var="q" select="SELECT dynamo__Document_Status__c FROM dynamo__Dynamo_Document__c where id=&apos;${dynDocId}&apos;" hideFromDataTab="true" />
          <cc:choose>
            <cc:when test="${q.dynamo__Document_Status__c == prevStatus}">
              <sff:relatedList var="allActivity"
                               type="dynamo__Dynamo_Document_Event__c"
                               parentID="${dynDocId}"
                               parentType="dynamo__Dynamo_Document__c"
                               orderBy="CreatedDate desc"
                               fields="CreatedDate, dynamo__Message__c, dynamo__Type__c"
                               data-tag-uuid="ed0e8189-ae03-411a-b29f-b62518996575" />
              <fl:composeContent var="viewDoc" editable="false" automaticElementIDs="false" hideFromDataTab="true" template="${doc[&quot;Status Report&quot;]}" />
              <fl:next step="Preview" />
            </cc:when>
            <cc:otherwise>
              <fl:setMessage message="Status has changed to ${q.dynamo__Document_Status__c} - Refreshing data" />
              <cv:addMapEntry key="eventID" value="open" map="${param}" />
              <fl:start label="Restart" segment=":first" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <flowStep id="Compose all"
                name="Compose all"
                sequenceID="ComposeAll"
                sequenceSrc=""
                nextStep="Comments pane"
                step="Comments pane">
        <initialization />
      </flowStep>
      <step id="Comments pane" name="Comments pane">
        <logic>
          <cv:set var="viewDoc" value="${composedDoc}" />
          <cc:choose>
            <cc:when test="${useCommentsPane}">
              <fl:next step="Query external comments" />
            </cc:when>
            <cc:otherwise>
              <fl:next step="Preview" label="Show preview" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="Query external comments" name="Query external comments">
        <logic>
          <cv:set var="externalFeed" value="${&apos;&apos;}" hideFromDataTab="true" />
          <cc:if test="${dynDocStatus == &apos;External Review&apos; or dynDocStatus == &apos;External New Version Request&apos;}">
            <soql:query var="externalFeed" select="SELECT Id, CreatedDate, dynamo__Message__c FROM dynamo__Dynamo_Document_Event__c WHERE dynamo__Dynamo_Document__c =&apos;${dynDoc.Id}&apos; AND dynamo__Type__c = &apos;Comment&apos; order by CreatedDate desc" hideFromDataTab="true" />
            <soql:query var="externalReplyFeed" select="SELECT Id, CreatedDate, dynamo__Message__c, dynamo__Type__c, dynamo__Parent_Event__c FROM dynamo__Dynamo_Document_Event__c WHERE dynamo__Dynamo_Document__c =&apos;${dynDoc.Id}&apos; AND dynamo__Type__c = &apos;Reply&apos; order by CreatedDate desc" hideFromDataTab="true" />
            <cc:choose>
              <cc:when test="${dynDocStatus == &apos;External Review&apos;}">
                <cv:set var="externalFeedViewOnly" value="${true}" />
              </cc:when>
              <cc:otherwise>
                <cv:set var="externalFeedViewOnly" value="${false}" />
              </cc:otherwise>
            </cc:choose>
            <cv:setMap var="externalFeedFields" hideFromDataTab="true">
              <cv:addMapEntry key="dynamo__Dynamo_Document__c" value="${dynDoc.Id}" />
              <cv:addMapEntry key="dynamo__Type__c" value="Comment" />
            </cv:setMap>
            <cv:setMap var="externalReplyFeedFields" hideFromDataTab="true">
              <cv:addMapEntry key="dynamo__Dynamo_Document__c" value="${dynDoc.Id}" />
              <cv:addMapEntry key="dynamo__Type__c" value="Reply" />
            </cv:setMap>
          </cc:if>
          <fl:next step="Preview" />
        </logic>
      </step>
      <screenStep id="Preview" name="Preview" screen="Main/PreviewScreen.html" />
      <step id="Handle buttons" name="Handle buttons">
        <logic>
          <cc:choose>
            <cc:when test="${param.button == &apos;exit&apos;}">
              <cv:set var="flowStatus" value="exit" />
              <fl:start segment="End" label="Exit" />
            </cc:when>
            <cc:when test="${param.button == &apos;edit&apos;}">
              <fl:start segment="Edit" label="Edit" />
            </cc:when>
            <cc:when test="${param.button == &apos;requestApproval&apos;}">
              <cv:set var="approvalAction" value="request" hideFromDataTab="true" />
              <fl:next label="Request approval" step="Approval" />
            </cc:when>
            <cc:when test="${param.button == &apos;approve&apos;}">
              <cv:set var="approvalAction" value="approve" />
              <fl:next label="Approve" step="Approval" />
            </cc:when>
            <cc:when test="${param.button == &apos;reject&apos;}">
              <cv:set var="approvalAction" value="reject" />
              <fl:next label="Reject" step="Approval" />
            </cc:when>
            <cc:when test="${param.button == &apos;comment&apos;}">
              <cv:set var="viewMode" value="comment" />
              <fl:next step="Start preview" label="Comment" />
            </cc:when>
            <cc:when test="${param.button == &apos;activity&apos;}">
              <cv:set var="viewMode" value="activity" />
              <fl:next step="Start preview" label="Activity" />
            </cc:when>
            <cc:when test="${param.button == &apos;preview&apos;}">
              <cv:set var="viewMode" value="preview" />
              <fl:next step="Start preview" label="Preview" />
            </cc:when>
            <cc:otherwise>
              <fl:next step="Preview" label="Otherwise" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="Edit button handler" name="Edit button handler">
        <logic>
          <fl:start segment="Edit" step="Edit button handler" />
        </logic>
      </step>
      <step id="After subflow" name="After subflow">
        <logic>
          <cc:choose>
            <cc:when test="${flowStatus == &apos;error&apos;}">
              <fl:start segment="Error" label="Error" />
            </cc:when>
            <cc:when test="${flowStatus == &apos;cancel&apos;}">
              <fl:next label="Cancel" step="Preview" />
            </cc:when>
            <cc:when test="${flowStatus == &apos;exit&apos;}">
              <fl:start label="Exit" segment="End" />
            </cc:when>
            <cc:otherwise>
              <fl:start segment="Init View" label="OK" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <flowStep id="Approval"
                name="Approval"
                sequenceID="ApprovalLogic"
                sequenceSrc=""
                nextStep="After subflow"
                step="After subflow">
        <initialization />
      </flowStep>
      <step id="Disable share" name="Disable share">
        <logic>
          <sfpub:expirePublication publicationID="${conf.publications.lastPublicationId}" />
          <cv:set var="dynDocStatus" value="Draft" />
          <sfcrud:update type="dynamo__Dynamo_Document__c">
            <sfcrud:field name="Id" value="${dynDocId}" />
            <sfcrud:field name="dynamo__Document_Status__c" value="${dynDocStatus}" />
            <sfcrud:field name="dynamo__Publication_URL__c" value="${&apos;&apos;}" />
            <sfcrud:field name="dynamo__Publication_Date__c" value="${&apos;&apos;}" />
            <sfcrud:field name="dynamo__Publication_Expires__c" value="${&apos;&apos;}" />
          </sfcrud:update>
          <sfcrud:create type="dynamo__Dynamo_Document_Event__c" var="dview">
            <sfcrud:field name="dynamo__Type__c" value="Other" />
            <sfcrud:field name="dynamo__Dynamo_Document__c" value="${dynDocId}" />
            <sfcrud:field name="dynamo__Message__c" value="Sharing disabled: ${publishURL}" />
          </sfcrud:create>
          <cv:set var="publishURL" value="${&apos;&apos;}" />
        </logic>
      </step>
      <step id="To draft" name="To draft">
        <logic>
          <cv:set var="dynDocStatus" value="Draft" />
          <cv:set var="approverId" value="" />
          <cv:set var="publishURL" value="" />
          <sfcrud:update type="dynamo__Dynamo_Document__c">
            <sfcrud:field name="Id" value="${dynDocId}" />
            <sfcrud:field name="dynamo__Document_Status__c" value="${dynDocStatus}" />
            <sfcrud:field name="dynamo__Next_User__c" value="${&apos;&apos;}" />
          </sfcrud:update>
          <fl:start segment="Load Files" label="Reload" />
        </logic>
      </step>
      <step id="Refresh data" name="Refresh data">
        <logic>
          <fl:start segment="Custom Data" label="Refresh" />
        </logic>
      </step>
    </steps>
  </standardFlow>
  <standardFlow id="Edit">
    <events>
      <defaultEvent step="Start edit" />
    </events>
    <steps>
      <step id="Start edit" name="Start edit">
        <logic>
          <soql:query var="statusQuery" select="SELECT Id, dynamo__Locked__c, dynamo__Last_Editor__r.Name FROM dynamo__Dynamo_Document__c where Id = &apos;${dynDocId}&apos;" hideFromDataTab="true" />
          <cc:choose>
            <cc:when test="${statusQuery.dynamo__Locked__c}">
              <fl:next label="Locked" step="Document in use" />
            </cc:when>
            <cc:otherwise>
              <sfcrud:update type="dynamo__Dynamo_Document__c">
                <sfcrud:field name="Id" value="${dynDocId}" />
                <sfcrud:field name="dynamo__Locked__c" value="${true}" />
                <sfcrud:field name="dynamo__Last_Editor__c" value="${UserInfo.getUserId()}" />
              </sfcrud:update>
            </cc:otherwise>
          </cc:choose>
          <fl:next step="Compose for edit" label="Basic editor" />
        </logic>
      </step>
      <step id="Compose for edit" name="Compose for edit">
        <logic>
          <cv:set var="editableAreaClass" value="background-color-oldlace" hideFromDataTab="true" />
          <fl:composeContent template="${doc[&quot;Document&quot;]}" var="composedDocEdit" hideFromDataTab="true" editable="true" automaticElementIDs="false" />
          <!-- TODO headings -->
          <fl:next step="Editor" />
        </logic>
      </step>
      <screenStep id="Editor" name="Editor" screen="Main/EditorScreen.html" onTimeout="Timeout" />
      <step id="Cancel" name="Cancel" message="Closing">
        <logic>
          <sfcrud:update type="dynamo__Dynamo_Document__c">
            <sfcrud:field name="Id" value="${dynDocId}" />
            <sfcrud:field name="dynamo__Locked__c" value="${false}" />
          </sfcrud:update>
          <cv:set var="flowStatus" value="cancel" />
          <fl:start segment="View" />
        </logic>
      </step>
      <step id="Timeout" name="Timeout">
        <logic>
          <cv:set var="fullPDF" value="${&apos;&apos;}" />
          <cv:set var="timeout" value="true" />
          <fl:next step="Compose" />
        </logic>
      </step>
      <screenStep id="Document in use" name="Document in use" screen="Main/Document in useScreen.html" />
      <flowStep id="Compose"
                name="Compose"
                sequenceID="ComposeAll"
                sequenceSrc=""
                nextStep="After compose"
                step="After compose">
        <initialization />
      </flowStep>
      <step id="After compose" name="After compose">
        <logic>
          <cv:set var="composedDocEdit" value="" />
          <cc:choose>
            <cc:when test="${flowStatus == &apos;ok&apos;}">
              <fl:next label="OK" step="Save" />
            </cc:when>
            <cc:otherwise>
              <fl:next label="Error" step="Error" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <flowStep id="Save"
                name="Save"
                sequenceID="Save"
                sequenceSrc=""
                nextStep="After save"
                step="After save">
        <initialization />
      </flowStep>
      <step id="After save" name="After save">
        <logic>
          <cc:choose>
            <cc:when test="${timeout}">
              <fl:start segment="End" label="Timeout" />
            </cc:when>
            <cc:when test="${flowStatus == &apos;ok&apos;}">
              <fl:next label="OK" step="OK" />
            </cc:when>
            <cc:otherwise>
              <fl:next label="Error" step="Error" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="Error" name="Error">
        <logic>
          <cv:set var="flowStatus" value="error" />
          <fl:start segment="Error" />
        </logic>
      </step>
      <step id="OK" name="OK">
        <logic>
          <cv:set var="flowStatus" value="ok" />
          <fl:start segment="Init View" label="Preview" />
        </logic>
      </step>
    </steps>
  </standardFlow>
  <standardFlow id="Email">
    <events>
      <defaultEvent step="Email start" />
    </events>
    <steps>
      <step id="Email start" name="Email start">
        <logic>
          <cc:choose>
            <cc:when test="${not empty composedEmail and !buttonEdit}" />
            <cc:otherwise>
              <fl:setMessage message="Composing email" />
              <cv:set var="emailSubjectOld" value="${conf.emailSubject}" />
              <cv:set var="editableAreaClass" value="editBorder" />
              <fl:composeContent template="${emailTemplate}" var="composedEmail" automaticElementIDs="false" inlineStyles="false" editable="${buttonEdit}" />
            </cc:otherwise>
          </cc:choose>
          <fl:setMessage message="Opening email" />
          <fl:next step="Email" />
        </logic>
      </step>
      <screenStep id="Email" name="Email" screen="Main/EmailScreen.html" onTimeout="Timeout" />
      <step id="Check if modified" name="Check if modified">
        <logic>
          <cv:set var="modified" value="false" />
          <cc:if test="${emailTemplate != oldEmailTemplate}">
            <cv:set var="modified" value="true" />
          </cc:if>
          <cc:if test="${conf.emailSubject != emailSubjectOld}">
            <cv:set var="modified" value="true" />
          </cc:if>
          <cc:if test="${email_edit_testModified}">
            <cv:set var="modified" value="true" />
          </cc:if>
          <cc:if test="${headersModified}">
            <cv:set var="headersModified" value="false" />
            <cv:set var="modified" value="true" />
          </cc:if>
          <cc:choose>
            <cc:when test="${modified and buttonEdit}">
              <cc:choose>
                <cc:when test="${param.button == &apos;exit&apos;}">
                  <fl:next step="Save prompt" label="Ask save before exit" />
                </cc:when>
                <cc:otherwise>
                  <fl:next step="Save all" label="Save before send" />
                </cc:otherwise>
              </cc:choose>
            </cc:when>
            <cc:otherwise>
              <fl:next step="Handle buttons" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="Handle buttons" name="Handle buttons">
        <logic>
          <cc:choose>
            <cc:when test="${param.button == &apos;to&apos;}">
              <cv:set var="headersModified" value="true" />
              <cv:set var="accountId" value="${cas.Account.Id}" />
              <cv:set var="selectedList" value="to" />
              <cv:set var="selectedContacts" value="${conf.selectedToContacts}" hideFromDataTab="true" screenData="true" />
              <fl:next label="To" step="Select contacts" />
            </cc:when>
            <cc:when test="${param.button == &apos;cc&apos;}">
              <cv:set var="headersModified" value="true" />
              <cv:set var="accountId" value="${cas.Account.Id}" />
              <cv:set var="selectedList" value="cc" />
              <cv:set var="selectedContacts" value="${conf.selectedCcContacts}" hideFromDataTab="true" screenData="true" />
              <fl:next label="Cc" step="Select contacts" />
            </cc:when>
            <cc:when test="${param.button == &apos;attachments&apos;}">
              <cv:set var="headersModified" value="true" />
              <fl:next step="Select attachments" label="Attachments" />
            </cc:when>
            <cc:when test="${param.button == &apos;save&apos;}">
              <fl:next step="Email start" label="Save" />
            </cc:when>
            <cc:when test="${param.button == &apos;saveYes&apos;}">
              <cv:set var="exit" value="true" />
              <fl:next step="Save all" label="Save yes" />
            </cc:when>
            <cc:when test="${param.button == &apos;saveNo&apos;}">
              <fl:start segment="End" label="Save no" />
            </cc:when>
            <cc:when test="${param.button == &apos;send&apos;}">
              <fl:next step="Send email" label="Send email" />
            </cc:when>
            <cc:when test="${param.button == &apos;requestApproval&apos;}">
              <cv:set var="approvalAction" value="request" hideFromDataTab="true" />
              <fl:next step="Approval" label="Request approval" />
            </cc:when>
            <cc:when test="${param.button == &apos;approve&apos;}">
              <cv:set var="approvalAction" value="approve" />
              <fl:next label="Approve" step="Approval" />
            </cc:when>
            <cc:when test="${param.button == &apos;reject&apos;}">
              <cv:set var="approvalAction" value="reject" />
              <fl:next label="Reject" step="Approval" />
            </cc:when>
            <cc:when test="${param.button == &apos;exit&apos;}">
              <fl:start label="Exit" segment="End" />
            </cc:when>
            <cc:otherwise>
              <cv:set var="customErrorMessage" value="Unknown button ${param.button}" />
              <fl:start segment="Error" label="Unknown button" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <flowStep id="Send email" name="Send email" sequenceID="SendEmail" sequenceSrc="" nextStep="After subflow">
        <initialization />
      </flowStep>
      <flowStep id="Save all" name="Save all" sequenceID="Save" sequenceSrc="" nextStep="After save">
        <initialization />
      </flowStep>
      <step id="After save" name="After save">
        <logic>
          <cc:choose>
            <cc:when test="${flowStatus == &apos;ok&apos;}">
              <cc:choose>
                <cc:when test="${exit == true}">
                  <fl:start segment="End" label="Exit" />
                </cc:when>
                <cc:otherwise>
                  <fl:next label="OK" step="Handle buttons" />
                </cc:otherwise>
              </cc:choose>
            </cc:when>
            <cc:otherwise>
              <fl:start label="Save error" segment="Error" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <screenStep id="Save prompt" name="Save prompt" screen="Main/Save promptScreen.html" />
      <flowStep id="Select attachments" name="Select attachments" sequenceID="SelectAttachments" sequenceSrc="" nextStep="Email start">
        <initialization />
      </flowStep>
      <flowStep id="Approval"
                name="Approval"
                sequenceID="ApprovalLogic"
                sequenceSrc=""
                nextStep="After subflow"
                step="After subflow">
        <initialization />
      </flowStep>
      <step id="After subflow" name="After subflow">
        <logic>
          <cc:choose>
            <cc:when test="${flowStatus == &apos;error&apos;}">
              <fl:start segment="Error" label="Error" />
            </cc:when>
            <cc:when test="${flowStatus == &apos;cancel&apos;}">
              <fl:next label="Cancel" step="Email start" />
            </cc:when>
            <cc:when test="${flowStatus == &apos;exit&apos;}">
              <fl:start label="Exit" segment="End" />
            </cc:when>
            <cc:otherwise>
              <fl:start segment="Init View" label="OK" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="To draft" name="To draft">
        <logic>
          <cv:set var="dynDocStatus" value="Draft" />
          <cv:set var="approverId" value="" />
          <cv:set var="publishURL" value="" />
          <sfcrud:update type="dynamo__Dynamo_Document__c">
            <sfcrud:field name="Id" value="${dynDocId}" />
            <sfcrud:field name="dynamo__Document_Status__c" value="${dynDocStatus}" />
            <sfcrud:field name="dynamo__Next_User__c" value="${&apos;&apos;}" />
          </sfcrud:update>
          <fl:start segment="Load Files" label="Reload" />
        </logic>
      </step>
      <flowStep id="Select contacts" name="Select contacts" sequenceID="SelectContacts" sequenceSrc="" nextStep="After select">
        <initialization />
      </flowStep>
      <step id="After select" name="After select">
        <logic>
          <cc:choose>
            <cc:when test="${flowStatus == &apos;error&apos;}">
              <fl:start segment="Error" label="Error" />
            </cc:when>
            <cc:otherwise>
              <cc:choose>
                <cc:when test="${selectedList == &apos;to&apos;}">
                  <cv:addMapEntry value="${selectedContacts}" key="selectedToContacts" map="${conf}" />
                </cc:when>
                <cc:when test="${selectedList == &apos;cc&apos;}">
                  <cv:addMapEntry value="${selectedContacts}" key="selectedCcContacts" map="${conf}" />
                </cc:when>
              </cc:choose>
              <fl:start segment="Init View" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="Compare" name="Compare">
        <logic>
          <cv:set value="${conf.fileEmail}" var="compareContentId" />
          <fl:next step="Compare files" />
        </logic>
      </step>
      <flowStep id="Compare files" name="Compare files" sequenceID="CompareHTML" sequenceSrc="" nextStep="After subflow">
        <initialization />
      </flowStep>
      <step id="Timeout" name="Timeout">
        <logic>
          <cv:set var="exit" value="true" />
          <fl:next step="Save all" />
        </logic>
      </step>
    </steps>
  </standardFlow>
  <standardFlow id="End">
    <events>
      <defaultEvent step="End of workflow" />
    </events>
    <steps>
      <step id="End of workflow" name="End of workflow">
        <logic>
          <cc:choose>
            <cc:when test="${dynDocStatus == &apos;Signed&apos;}">
              <fl:next label="Do cleanup" step="Remove temp files" />
            </cc:when>
            <cc:otherwise>
              <fl:next step="Finnish" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="Remove temp files" name="Remove temp files">
        <logic>
          <!-- Removes temp HTML files, PDF under Dynamo Document and signature images -->
          <cv:set var="update" value="${false}" hideFromDataTab="true" />
          <cc:if test="${not empty conf.fileHTML}">
            <sfcrud:delete value="${conf.fileHTML}" />
            <cv:setProperty target="${conf.fileHTML}" value="${&apos;&apos;}" />
            <cv:set var="update" value="${true}" />
            <cl:forEach value="${conf.signers}" var="i">
              <sfcrud:delete value="${i.imageFileId}" />
              <cv:setProperty target="${i.imageFileId}" value="${&apos;&apos;}" />
            </cl:forEach>
          </cc:if>
          <cc:if test="${not empty conf.filePDFXXXXX}">
            <sfcrud:delete value="${conf.filePDF}" />
            <cv:setProperty target="${conf.filePDF}" value="${&apos;&apos;}" />
            <cv:set var="update" value="${true}" />
          </cc:if>
          <cc:if test="${update}">
            <cv:toJSON value="${conf}" var="confJSON" />
            <sfcrud:update type="dynamo__Dynamo_Document__c">
              <sfcrud:field name="Id" value="${dynDocId}" />
              <sfcrud:field name="dynamo__Configuration_JSON__c" value="${confJSON}" />
            </sfcrud:update>
          </cc:if>
          <fl:next step="Finnish" />
        </logic>
      </step>
      <step id="Finnish" name="Finnish">
        <logic>
          <fl:finish />
        </logic>
      </step>
    </steps>
  </standardFlow>
  <standardFlow id="Error">
    <events>
      <defaultEvent step="Show error message" />
    </events>
    <steps>
      <screenStep id="Show error message" name="Show error message" screen="Main/Show error messageScreen.html" />
      <step id="Exit" name="Exit">
        <logic>
          <fl:finish />
        </logic>
      </step>
    </steps>
  </standardFlow>
</flowSequence>